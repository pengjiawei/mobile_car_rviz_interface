// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: map.proto

#ifndef PROTOBUF_map_2eproto_INCLUDED
#define PROTOBUF_map_2eproto_INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_map_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsMapCellImpl();
void InitDefaultsMapCell();
void InitDefaultsMapImpl();
void InitDefaultsMap();
inline void InitDefaults() {
  InitDefaultsMapCell();
  InitDefaultsMap();
}
}  // namespace protobuf_map_2eproto
class Map;
class MapDefaultTypeInternal;
extern MapDefaultTypeInternal _Map_default_instance_;
class MapCell;
class MapCellDefaultTypeInternal;
extern MapCellDefaultTypeInternal _MapCell_default_instance_;
namespace google {
namespace protobuf {
template<> ::Map* Arena::Create< ::Map>(Arena*);
template<> ::MapCell* Arena::Create< ::MapCell>(Arena*);
}  // namespace protobuf
}  // namespace google

enum MapCell_Value {
  MapCell_Value_FREE = 0,
  MapCell_Value_OBSTACLE = 1,
  MapCell_Value_UNKNOWN = 2
};
bool MapCell_Value_IsValid(int value);
const MapCell_Value MapCell_Value_Value_MIN = MapCell_Value_FREE;
const MapCell_Value MapCell_Value_Value_MAX = MapCell_Value_UNKNOWN;
const int MapCell_Value_Value_ARRAYSIZE = MapCell_Value_Value_MAX + 1;

const ::google::protobuf::EnumDescriptor* MapCell_Value_descriptor();
inline const ::std::string& MapCell_Value_Name(MapCell_Value value) {
  return ::google::protobuf::internal::NameOfEnum(
    MapCell_Value_descriptor(), value);
}
inline bool MapCell_Value_Parse(
    const ::std::string& name, MapCell_Value* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MapCell_Value>(
    MapCell_Value_descriptor(), name, value);
}
// ===================================================================

class MapCell : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MapCell) */ {
 public:
  MapCell();
  virtual ~MapCell();

  MapCell(const MapCell& from);

  inline MapCell& operator=(const MapCell& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MapCell(MapCell&& from) noexcept
    : MapCell() {
    *this = ::std::move(from);
  }

  inline MapCell& operator=(MapCell&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MapCell& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapCell* internal_default_instance() {
    return reinterpret_cast<const MapCell*>(
               &_MapCell_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(MapCell* other);
  friend void swap(MapCell& a, MapCell& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MapCell* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<MapCell>(NULL);
  }

  MapCell* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<MapCell>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MapCell& from);
  void MergeFrom(const MapCell& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MapCell* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef MapCell_Value Value;
  static const Value FREE =
    MapCell_Value_FREE;
  static const Value OBSTACLE =
    MapCell_Value_OBSTACLE;
  static const Value UNKNOWN =
    MapCell_Value_UNKNOWN;
  static inline bool Value_IsValid(int value) {
    return MapCell_Value_IsValid(value);
  }
  static const Value Value_MIN =
    MapCell_Value_Value_MIN;
  static const Value Value_MAX =
    MapCell_Value_Value_MAX;
  static const int Value_ARRAYSIZE =
    MapCell_Value_Value_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Value_descriptor() {
    return MapCell_Value_descriptor();
  }
  static inline const ::std::string& Value_Name(Value value) {
    return MapCell_Value_Name(value);
  }
  static inline bool Value_Parse(const ::std::string& name,
      Value* value) {
    return MapCell_Value_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::uint32 x() const;
  void set_x(::google::protobuf::uint32 value);

  // required uint32 y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::uint32 y() const;
  void set_y(::google::protobuf::uint32 value);

  // optional .MapCell.Value value = 3 [default = UNKNOWN];
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  ::MapCell_Value value() const;
  void set_value(::MapCell_Value value);

  // @@protoc_insertion_point(class_scope:MapCell)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();
  void set_has_value();
  void clear_has_value();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;
  int value_;
  friend struct ::protobuf_map_2eproto::TableStruct;
  friend void ::protobuf_map_2eproto::InitDefaultsMapCellImpl();
};
// -------------------------------------------------------------------

class Map : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Map) */ {
 public:
  Map();
  virtual ~Map();

  Map(const Map& from);

  inline Map& operator=(const Map& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Map(Map&& from) noexcept
    : Map() {
    *this = ::std::move(from);
  }

  inline Map& operator=(Map&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Map& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Map* internal_default_instance() {
    return reinterpret_cast<const Map*>(
               &_Map_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Map* other);
  friend void swap(Map& a, Map& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Map* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Map>(NULL);
  }

  Map* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Map>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Map& from);
  void MergeFrom(const Map& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Map* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MapCell mapCell = 3;
  int mapcell_size() const;
  void clear_mapcell();
  static const int kMapCellFieldNumber = 3;
  ::MapCell* mutable_mapcell(int index);
  ::google::protobuf::RepeatedPtrField< ::MapCell >*
      mutable_mapcell();
  const ::MapCell& mapcell(int index) const;
  ::MapCell* add_mapcell();
  const ::google::protobuf::RepeatedPtrField< ::MapCell >&
      mapcell() const;

  // required uint32 width = 1;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // required uint32 height = 2;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Map)
 private:
  void set_has_width();
  void clear_has_width();
  void set_has_height();
  void clear_has_height();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::MapCell > mapcell_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  friend struct ::protobuf_map_2eproto::TableStruct;
  friend void ::protobuf_map_2eproto::InitDefaultsMapImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MapCell

// required uint32 x = 1;
inline bool MapCell::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MapCell::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MapCell::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MapCell::clear_x() {
  x_ = 0u;
  clear_has_x();
}
inline ::google::protobuf::uint32 MapCell::x() const {
  // @@protoc_insertion_point(field_get:MapCell.x)
  return x_;
}
inline void MapCell::set_x(::google::protobuf::uint32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:MapCell.x)
}

// required uint32 y = 2;
inline bool MapCell::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MapCell::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MapCell::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MapCell::clear_y() {
  y_ = 0u;
  clear_has_y();
}
inline ::google::protobuf::uint32 MapCell::y() const {
  // @@protoc_insertion_point(field_get:MapCell.y)
  return y_;
}
inline void MapCell::set_y(::google::protobuf::uint32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:MapCell.y)
}

// optional .MapCell.Value value = 3 [default = UNKNOWN];
inline bool MapCell::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MapCell::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MapCell::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MapCell::clear_value() {
  value_ = 2;
  clear_has_value();
}
inline ::MapCell_Value MapCell::value() const {
  // @@protoc_insertion_point(field_get:MapCell.value)
  return static_cast< ::MapCell_Value >(value_);
}
inline void MapCell::set_value(::MapCell_Value value) {
  assert(::MapCell_Value_IsValid(value));
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:MapCell.value)
}

// -------------------------------------------------------------------

// Map

// required uint32 width = 1;
inline bool Map::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 Map::width() const {
  // @@protoc_insertion_point(field_get:Map.width)
  return width_;
}
inline void Map::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:Map.width)
}

// required uint32 height = 2;
inline bool Map::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Map::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Map::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Map::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 Map::height() const {
  // @@protoc_insertion_point(field_get:Map.height)
  return height_;
}
inline void Map::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:Map.height)
}

// repeated .MapCell mapCell = 3;
inline int Map::mapcell_size() const {
  return mapcell_.size();
}
inline void Map::clear_mapcell() {
  mapcell_.Clear();
}
inline ::MapCell* Map::mutable_mapcell(int index) {
  // @@protoc_insertion_point(field_mutable:Map.mapCell)
  return mapcell_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::MapCell >*
Map::mutable_mapcell() {
  // @@protoc_insertion_point(field_mutable_list:Map.mapCell)
  return &mapcell_;
}
inline const ::MapCell& Map::mapcell(int index) const {
  // @@protoc_insertion_point(field_get:Map.mapCell)
  return mapcell_.Get(index);
}
inline ::MapCell* Map::add_mapcell() {
  // @@protoc_insertion_point(field_add:Map.mapCell)
  return mapcell_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MapCell >&
Map::mapcell() const {
  // @@protoc_insertion_point(field_list:Map.mapCell)
  return mapcell_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::MapCell_Value> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MapCell_Value>() {
  return ::MapCell_Value_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_map_2eproto_INCLUDED
